# Generated by Django 3.2.5 on 2022-05-29 22:38

from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="GitHubUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "username",
                    models.CharField(max_length=256, unique=True, verbose_name="логин"),
                ),
                ("token", models.CharField(max_length=256)),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("st", "Ученик"),
                            ("tc", "Учитель"),
                            ("md", "Модератор"),
                        ],
                        default="st",
                        max_length=2,
                        verbose_name="статус пользователя",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[("objects", django.contrib.auth.models.UserManager()),],
        ),
        migrations.CreateModel(
            name="ActionFile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=32, verbose_name="action name")),
                ("file", models.FileField(upload_to="", verbose_name="action file")),
            ],
        ),
        migrations.CreateModel(
            name="Group",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("year", models.DateField(verbose_name="дата создания")),
                (
                    "number",
                    models.PositiveSmallIntegerField(verbose_name="номер группы"),
                ),
                (
                    "course",
                    models.PositiveSmallIntegerField(verbose_name="курс группы"),
                ),
                (
                    "faculty",
                    models.PositiveSmallIntegerField(verbose_name="факультет группы"),
                ),
                (
                    "studing_form",
                    models.CharField(
                        choices=[("О", "Ученик"), ("З", "Учитель")],
                        default="st",
                        max_length=2,
                        verbose_name="форма обучения",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Subject",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=128, verbose_name="название предмета"),
                ),
                (
                    "assignee",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="преподаватель",
                    ),
                ),
                (
                    "group",
                    models.ManyToManyField(to="main.Group", verbose_name="группа"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Task",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "input",
                    models.FileField(
                        upload_to="", verbose_name="Тестовый список входных параметров"
                    ),
                ),
                (
                    "right_output",
                    models.FileField(
                        upload_to="", verbose_name="Тестовый список ответов"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=128, verbose_name="название репозитория (англ.)"
                    ),
                ),
                (
                    "description",
                    models.CharField(max_length=1023, verbose_name="тех. задание"),
                ),
                (
                    "actions_file",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="main.actionfile",
                        verbose_name="файл с настройками проверки (.yaml)",
                    ),
                ),
                (
                    "subject",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="main.subject",
                        verbose_name="задание",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TaskStatus",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("status", models.CharField(max_length=32, verbose_name="status")),
                (
                    "task",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="main.task",
                        verbose_name="задание",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="пользователь",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="githubuser",
            name="group",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.DO_NOTHING,
                to="main.group",
                verbose_name="группа",
            ),
        ),
        migrations.AddField(
            model_name="githubuser",
            name="groups",
            field=models.ManyToManyField(
                blank=True,
                help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                related_name="user_set",
                related_query_name="user",
                to="auth.Group",
                verbose_name="groups",
            ),
        ),
        migrations.AddField(
            model_name="githubuser",
            name="user_permissions",
            field=models.ManyToManyField(
                blank=True,
                help_text="Specific permissions for this user.",
                related_name="user_set",
                related_query_name="user",
                to="auth.Permission",
                verbose_name="user permissions",
            ),
        ),
    ]
